<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on  </title>
    <link>/posts/</link>
    <description>Recent content in Posts on  </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 15 Aug 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Automating the Browser with Python and Selenium</title>
      <link>/2018/08/15/automating-the-browser-with-python-and-selenium/</link>
      <pubDate>Wed, 15 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/08/15/automating-the-browser-with-python-and-selenium/</guid>
      <description>This is a Python Markdown test.
from Selenium import webdriver</description>
    </item>
    
    <item>
      <title>Modelling Time Until Reorder Using Customer Transaction Data</title>
      <link>/2018/07/28/survival-analysis-in-r/</link>
      <pubDate>Sat, 28 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/07/28/survival-analysis-in-r/</guid>
      <description>In this post we will use Survival Analysis to predict the amount of time until a customer will repurchase. We will use the publicly available Telco customer dataset available on my github under the repo for this post.
survival_data &amp;lt;- read.csv(&amp;quot;customer_transaction_data.csv&amp;quot;) str(survival_data) ## &amp;#39;data.frame&amp;#39;: 5122 obs. of 6 variables: ## $ daysSinceFirstPurch: int 37 63 48 17 53 11 22 16 74 44 ... ## $ shoppingCartValue : num 33.4 31.</description>
    </item>
    
    <item>
      <title>Text Analysis with tidytext, ggplot2 and Quanteda </title>
      <link>/2018/07/28/text-analysis-with-tidytext-ggplot2-and-quanteda/</link>
      <pubDate>Sat, 28 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/07/28/text-analysis-with-tidytext-ggplot2-and-quanteda/</guid>
      <description>In this short guide we’ll perform text analysis on a corpus of 34 blog posts from one blog and try to determine what the blog is about, let’s see how much we can find out without going through and reading all 34 blog posts.
Libraries There are a fair few libraries to load for text analysis;
library(stringr) library(tidyverse) ## ── Attaching packages ───────────────────────────────────────────────────────────────────────────────── tidyverse 1.2.1 ── ## ✔ ggplot2 2.2.1 ✔ readr 1.</description>
    </item>
    
    <item>
      <title>Text Analysis with visNetwork</title>
      <link>/2018/07/28/text-analysis-with-visnetwork/</link>
      <pubDate>Sat, 28 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/07/28/text-analysis-with-visnetwork/</guid>
      <description>Text Analysis is growing in popularity just about everywhere - it’s an abundant source of data that until recently most analysts have ignored because of it’s unwieldy structure. Recent developments and packages in the R programming language have made it easy to derive significant meaning from a text corpus.
Practical Applications of Text Analysis  Analysing email data (e.g. from a customer service inbox to analyze queries and feedback), Web scraping (e.</description>
    </item>
    
    <item>
      <title>Maps with R and Leaflet</title>
      <link>/2018/07/24/maps-with-r-and-leaflet/</link>
      <pubDate>Tue, 24 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>/2018/07/24/maps-with-r-and-leaflet/</guid>
      <description>Interactive Maps in R with leaflet 2018-07-24
Plotting interactive maps is easy with the leaflet package in R. In this short guide we’ll use the Launceston Public Seating dataset to plot markers, add pop-ups and freeze the map on an area of interest. Let’s get started.
Load the leaflet and dplyr libraries:
library(leaflet) library(dplyr) ## ## Attaching package: &amp;#39;dplyr&amp;#39; ## The following objects are masked from &amp;#39;package:stats&amp;#39;: ## ## filter, lag ## The following objects are masked from &amp;#39;package:base&amp;#39;: ## ## intersect, setdiff, setequal, union Now lets look at our dataset.</description>
    </item>
    
    <item>
      <title></title>
      <link>/1/01/01/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/1/01/01/</guid>
      <description>Automating the Browser with Python and Selenium       code{white-space: pre;} pre:not([class]) { background-color: white; }  if (window.hljs) { hljs.configure({languages: []}); hljs.initHighlightingOnLoad(); if (document.readyState &amp;&amp; document.readyState === &#34;complete&#34;) { window.setTimeout(function() { hljs.initHighlighting(); }, 0); } }  h1 { font-size: 34px; } h1.title { font-size: 38px; } h2 { font-size: 30px; } h3 { font-size: 24px; } h4 { font-size: 18px; } h5 { font-size: 16px; } h6 { font-size: 12px; } .</description>
    </item>
    
  </channel>
</rss>